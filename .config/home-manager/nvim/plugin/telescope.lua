local builtin = require("telescope.builtin")
vim.keymap.set("n", "<leader>ff", builtin.find_files, { desc = "[f]ind [f]iles" })
vim.keymap.set("n", "<leader>fg", builtin.live_grep, { desc = "[f]ind in live [g]rep" })
vim.keymap.set("n", "<leader>fb", builtin.buffers, { desc = "[f]ind [b]uffers" })
vim.keymap.set("n", "<leader>fh", builtin.help_tags, { desc = "[f]ind in [h]elp tags" })
vim.keymap.set("n", "<leader>fr", builtin.registers, { desc = "[f]ind [r]egisters" })
vim.keymap.set("n", "<leader>fm", builtin.marks, { desc = "[f]ind [m]arks " })
vim.keymap.set("n", "<leader>M", builtin.man_pages, { desc = "find in [M]anpages" })
vim.keymap.set("n", "<leader>fj", builtin.jumplist, { desc = "[f]ind in [j]umplist" })
vim.keymap.set("n", "<leader>fk", builtin.keymaps, { desc = "[f]ind [k]eymaps" })
vim.keymap.set("n", "<leader>fe", builtin.quickfix, { desc = "[f]ind [e]rrors quickfix" })
vim.keymap.set("n", "<leader>he", builtin.quickfixhistory, { desc = "[h]istory quickfix" })
vim.keymap.set("n", "<leader>hp", builtin.command_history, { desc = "[h]istory commands" })
vim.keymap.set("n", "<leader>hf", builtin.search_history, { desc = "[h]istory find" })
vim.keymap.set("n", "<leader>p", builtin.commands, { desc = "search commands" })
vim.keymap.set("n", "<leader>cs", builtin.colorscheme, { desc = "[c]hange color scheme" })
vim.keymap.set("n", "<leader>F", builtin.current_buffer_fuzzy_find, {})
vim.keymap.set("n", "<leader>gb", builtin.git_branches, { desc = "find [g]it [b]ranches" })
vim.keymap.set("n", "<leader>gf", builtin.git_files, { desc = "find [g]it [f]iles" })
vim.keymap.set("n", "<leader>gc", builtin.git_bcommits, { desc = "find buffers [g]it [c]ommits" })
vim.keymap.set("n", "<leader>gC", builtin.git_commits, { desc = "find [g]it [C]ommits" })
vim.keymap.set("n", "<leader>gi", builtin.git_status, { desc = "[g]it status [i]nfo" })
vim.keymap.set("n", "<leader>gs", builtin.git_stash, { desc = "[g]it [s]tash" })
vim.keymap.set("n", "<leader>o", builtin.lsp_dynamic_workspace_symbols, { desc = "find symb[o]ls" })
